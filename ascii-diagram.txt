Code Researcher Agent Orchestration - ASCII Diagram

┌─────────────────────────────────────────────────────────────────────────────────┐
│                           USER INTERACTION LAYER                               │
├─────────────────────┬─────────────────────┬─────────────────────────────────────┤
│   Amazon Q CLI      │   Web Interface     │        API Gateway                  │
│   (Entry Point)     │   (Optional)        │        (REST API)                   │
│        🖥️           │        🌐           │           📊                        │
└─────────────────────┴─────────────────────┴─────────────────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                         ORCHESTRATOR AGENT                                     │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │  🧠 Claude 3.7 Sonnet with Extended Thinking                          │    │
│  │  • Coordinates workflow between specialist agents                      │    │
│  │  • Manages agent delegation and task distribution                      │    │
│  │  • Tracks analysis progress and maintains session state               │    │
│  │  • Synthesizes final results from all specialist outputs              │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘
                                    │
                    ┌───────────────┼───────────────┐
                    ▼               ▼               ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                           SPECIALIST AGENTS                                    │
├─────────────────────┬─────────────────────┬─────────────────────────────────────┤
│   ANALYSIS AGENT    │   SYNTHESIS AGENT   │      BUILD & TEST AGENT             │
│        🔍           │        🔧           │            ⚙️                       │
│                     │                     │                                     │
│ Deep Research       │ Patch Generation    │ Code Compilation                    │
│ • Symbol Search     │ • Hypothesis Gen    │ • Crash Reproduction                │
│ • Code Patterns     │ • Fix Creation      │ • Validation Testing                │
│ • Git History       │ • Explanation       │ • Performance Check                 │
│ • Root Cause        │ • Justification     │ • Build Verification                │
└─────────────────────┴─────────────────────┴─────────────────────────────────────┘
         │                       │                           │
         ▼                       ▼                           ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              TOOLS LAYER                                       │
├─────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────────────────┤
│ Search  │ Search  │ Search  │Generate │ Build   │Reproduce│    Validate         │
│ Symbol  │ Code    │ Commits │ Patch   │ Code    │ Crash   │    Patch            │
│ Def     │ Pattern │ History │         │         │         │                     │
│   🏷️    │   🔎    │   📚    │   ✏️    │   🔨    │   💥    │      ✅             │
│ ctags   │git grep │git log  │AI Gen   │CodeBuild│ECS/     │   Static Analysis   │
│         │         │         │         │         │Fargate  │                     │
└─────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                           DATA STORAGE LAYER                                   │
├─────────────────────┬─────────────────────┬─────────────────────────────────────┤
│     DynamoDB        │         S3          │      CodeCommit/GitHub              │
│        🗄️           │        📦           │            📋                       │
│                     │                     │                                     │
│ • Session Data      │ • Build Artifacts   │ • Source Code                       │
│ • Analysis Context  │ • Crash Reports     │ • Git History                       │
│ • Agent Messages    │ • Generated Patches │ • Commit Metadata                   │
│ • Progress Tracking │ • Test Results      │ • Branch Information                │
└─────────────────────┴─────────────────────┴─────────────────────────────────────┘

AGENT CONVERSATION FLOW:
═══════════════════════

1. User Input: "Analyze this kernel crash"
   ↓
2. Orchestrator: Receives crash report + repository path
   ↓
3. Orchestrator → Analysis Agent: "Perform deep analysis"
   ↓
4. Analysis Agent executes tools in sequence:
   • search_definition("smsusb_term_device")
   • search_code("__flush_work")
   • search_commits("smsusb workqueue")
   ↓
5. Analysis Agent → Orchestrator: "Context gathered, root cause identified"
   ↓
6. Orchestrator → Synthesis Agent: "Generate fix based on analysis"
   ↓
7. Synthesis Agent → Orchestrator: "Patch created with hypothesis"
   ↓
8. Orchestrator → Build Agent: "Validate this patch"
   ↓
9. Build Agent → Orchestrator: "Patch tested, results available"
   ↓
10. Orchestrator → User: "Complete analysis with fix and validation"

AGENT-AS-TOOLS PATTERN:
═══════════════════════

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│  Orchestrator   │───▶│ Analysis Agent  │───▶│   Tool: ctags   │
│     Agent       │    │   (as Tool)     │    │   search_def    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │
         ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│ Synthesis Agent │    │  Build Agent    │    │   Tool: git     │
│   (as Tool)     │    │   (as Tool)     │    │   operations    │
└─────────────────┘    └─────────────────┘    └─────────────────┘

DATA FLOW DIAGRAM:
═══════════════════

Crash Report ──┐
               ├──▶ Orchestrator ──┐
Repository ────┘                   │
                                   ▼
                            Analysis Agent ──┐
                                             ├──▶ DynamoDB
                            Synthesis Agent ─┤    (Context)
                                             │
                            Build Agent ─────┘
                                   │
                                   ▼
                            Final Results ──▶ User

LEGEND:
═══════
🖥️  CLI Interface        🔍 Analysis Specialist    🏷️  Symbol Search
🌐 Web Interface        🔧 Synthesis Specialist   🔎 Code Search  
📊 API Gateway          ⚙️  Build Specialist       📚 History Search
🧠 AI Orchestrator      🗄️  Database Storage       ✏️  Patch Generation
📦 File Storage         📋 Code Repository        🔨 Build Tools
💥 Crash Reproduction   ✅ Validation Tools       

AWS SERVICES MAPPING:
═══════════════════════
• Lambda Functions: All agents and tools
• DynamoDB: Session and context storage
• S3: Artifacts and temporary files
• API Gateway: HTTP interface
• Bedrock: Claude 3.7 Sonnet model
• CloudWatch: Monitoring and logging
• X-Ray: Distributed tracing
